),
column(width = 8,
DT::dataTableOutput("prepprogramdb")
)
),
tags$hr(),
fluidRow(
column(width = 4,
#input fields
tags$hr(),
h2('Choose Actual Day Activities:'),
shinyjs::hidden(textInput("aid", "Id", "0")),
selectInput("actual_id","Choose Actual Day Activity", actList), #this is where we do drop down list
dateInput("actual_start_date", "Choose Start Date", "", format = "dd-mm-yy"),
textInput("actual_start_time", "Select Start Time:", ""),
dateInput("actual_end_date", "Choose End Date", "", format = "dd-mm-yy"),
textInput("actual_end_time", "Select End Time:", ""),
textInput("actual_activity_location", "Select Location", ""),
#action buttons for prep day
actionButton("submitactprogram", "Submit"),
actionButton("updateactprogram", "Update")
),
column(width = 8,
DT::dataTableOutput("actprogramdb")
)
)
)
)
tablebody <- dashboardBody(
tabItems(
tab1,
tab2,
tab3,
tab4,
tab5
)
)
sidebars <- (sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Analysis 1 - MBA", tabName = "mba", icon = icon("signal")),
menuItem("Client Database", tabName = "clientdb", icon = icon("users")),
menuItem("Programs Database", tabName = "program", icon = icon("list-ol")),
menuItem("Activity", tabName = "activity", icon = icon("pied-piper-alt"))
))
ui <- dashboardPage(
skin= c("red"),
dashboardHeader(title = "Erumpere"),
dashboardSidebar(sidebars),
tablebody
)
########################################### Server ###########################################
source('server.R')
########################################### Start the whole thing ###########################################
shinyApp(ui = ui, server = server)
########################################### Activity - Helper, CRUD methods ###########################################
#directoryprepact <- "D:/Documents/SMU/Year 4/Semester 2/Analytics Practicum/ANLY482/crud/Data/prep_activities.xls"
#directoryactualact <- "D:/Documents/SMU/Year 4/Semester 2/Analytics Practicum/ANLY482/crud/Data/actual_activities.xls"
#directoryprepprog <- "D:/Documents/SMU/Year 4/Semester 2/Analytics Practicum/ANLY482/crud/Data/prep_list.xls"
#directoryactualprog <- "D:/Documents/SMU/Year 4/Semester 2/Analytics Practicum/ANLY482/crud/Data/actual_list.xls"
directoryprepact <- "/Users/Edwin/ANLY482/crud/Data/prep_activities.xls"
directoryactualact <- "/Users/Edwin/ANLY482/crud/Data/actual_activities.xls"
directoryprepprog <- "/Users/Edwin/ANLY482/crud/Data/prep_list.xls"
directoryactualprog <- "/Users/Edwin/ANLY482/crud/Data/actual_list.xls"
loadPrepAct <- function() {
# Read all the files into a list
# Just read latest file
data <- readxl::read_xls(directoryprepact)
data
}
loadActualAct <- function() {
# Read all the files into a list
# Just read latest file
data <- readxl::read_xls(directoryactualact)
data
}
###################################################################################################################
# the pull function is used to return all the values in the specified column name and put is in a list format
# pull function requires dplyr library
actList <- pull(loadActualAct(),"activity_name")
actldb <- as.data.frame(loadActualAct())
prepList <- pull(loadPrepAct(),"activity_name")
prepdb <- as.data.frame(loadPrepAct())
#Table methods
GetTableMetadata_actl <- function() {
fields <- c(id = "Id",
actual_id = "Activity ID",
activity_name = "Activity Name",
activity_desc = "Description",
proj_loc = "Location",
loc_name = "Location Name"
)
result <- list(fields = fields)
return (result)
}
GetTableMetadata_prep <- function() {
fields <- c(id = "Id",
actual_id = "Activity ID",
activity_name = "Activity Name",
activity_desc = "Description"
)
result <- list(fields = fields)
return (result)
}
#Read
ReadData_prep <- function() {
if (exists("prepdb")) {
prepdb
}
}
ReadData_actl <- function() {
if (exists("actldb")) {
actldb
}
}
###################################### Manage Prep Day Programs #########################################################
outputDir_prepprogram <- "/Users/Edwin/ANLY482/crud/PrepActivityDB/"
saveData_prepprogram <- function(prepprogramdb) {
fileName <- sprintf("%s_%s.xls", as.double(format(Sys.time(), "%y%m%d%H%M%S")), "prepprog")
WriteXLS::WriteXLS(
x = prepprogramdb,
ExcelFileName = file.path(outputDir_prepprogram, fileName)
)
}
loadData_prepprogram <- function() {
files <- list.files(outputDir_prepprogram, full.names = TRUE)
data <- readxl::read_xls(tail(files, n=1))
data
}
prepprogramdb <- loadData_prepprogram()
prepprogramdb <- as.data.frame(prepprogramdb)
GetTableMetadata_prepprogram <- function() {
fields <- c(ppid = "Id",
activity_client_date = "Client Key",
prep_id = "Activity ID",
activity_date = "Date of Activity",
activity_start_time = "Activity Start Time",
activity_duration = "Activity Duration",
activity_location = "Location"
)
result <- list(fields = fields)
return (result)
}
GetNextId_prepprogram <- function() {
if (exists("prepprogramdb") && nrow(prepprogramdb) > 0) {
max(as.integer(rownames(prepprogramdb))) + 1
} else {
return (1)
}
}
#Create
CreateData_prepprogram <- function(data) {
# drops <- c('activity_start_time.sec',
#            'activity_start_time.min',
#            'activity_start_time.mday',
#            'activity_start_time.mon',
#            'activity_start_time.year')
# data[ , !(names(data) %in% drops)]
data <- CastData_prepprogram(data)
rownames(data) <- GetNextId_prepprogram()
if (exists("prepprogramdb")) {
prepprogramdb <<- rbind(prepprogramdb, data)
} else {
prepprogramdb <<- data
}
print(prepprogramdb)
saveData_prepprogram(prepprogramdb)
}
#Read
ReadData_prepprogram <- function() {
if (exists("prepprogramdb")) {
prepprogramdb
}
}
ReadData_prepprogram_filter <- function(filter_prog){
if (exists("prepprogramdb")) {
prepprogramdb
filtered <- filter(prepprogramdb, activity_client_date == filter_prog)
}
}
#Update
UpdateData_prepprogram <- function(data) {
data <- CastData_prepprogram(data)
prepprogramdb[row.names(prepprogramdb) == row.names(data), ] <<- data
shinyjs::disable('updateprepprogram')
shinyjs::enable('submitprepprogram')
saveData_prepprogram(prepprogramdb)
}
CastData_prepprogram <- function(data) {
act_date <- as.Date("1970-01-01") + as.double(data['activity_date'])
datar <- data.frame(
prep_id = data["prep_id"],
activity_client_date = data["activity_client_date"],
activity_date = as.character(act_date),
activity_start_time = data["activity_start_time"],
activity_duration = data["activity_duration"],
activity_location = data["activity_location"],
stringsAsFactors = FALSE)
rownames(datar) <- data["ppid"]
return (datar)
}
CreateDefaultRecord_prepprogram <- function(d) {
mydefault <- CastData_prepprogram_default(list(ppid = "0", activity_client_date = d['activity_client_date'], prep_id = "", activity_date="", activity_start_time="", activity_duration= "", activity_location =""))
print(mydefault)
return (mydefault)
}
UpdateInputs_prepprogram <- function(data, session) {
updateDateInput(session, "activity_date", value=NA)
updateTextInput(session, "activity_location", value="")
updateTextInput(session, "activity_start_time", value="")
updateTextInput(session, "activity_duration", value="")
}
###################################### Manage Prep Day Programs #########################################################
outputDir_actprogram <- "/Users/Edwin/ANLY482/crud/ActualActivityDB/"
saveData_actprogram <- function(actprogramdb) {
fileName <- sprintf("%s_%s.xls", as.double(format(Sys.time(), "%y%m%d%H%M%S")), "actprog")
WriteXLS::WriteXLS(
x = actprogramdb,
ExcelFileName = file.path(outputDir_actprogram, fileName)
)
}
loadData_actprogram <- function() {
files <- list.files(outputDir_actprogram, full.names = TRUE)
data <- readxl::read_xls(tail(files, n=1))
data
}
actprogramdb <- loadData_actprogram()
actprogramdb <- as.data.frame(actprogramdb)
GetTableMetadata_actprogram <- function() {
fields <- c(aid = "Id",
activity_client_date = "Client Key",
actual_id = "Activity ID",
actual_start_date = "Activity Start Date",
actual_start_time = "Activity Start Time",
actual_end_date = "Activity End Date",
actual_end_time = "Activity End Time",
actual_activity_location = "Location"
)
result <- list(fields = fields)
return (result)
}
GetNextId_actprogram <- function() {
if (exists("actprogramdb") && nrow(actprogramdb) > 0) {
max(as.integer(rownames(actprogramdb))) + 1
} else {
return (1)
}
}
#Create
CreateData_actprogram <- function(data) {
data <- CastData_actprogram(data)
rownames(data) <- GetNextId_actprogram()
if (exists("actprogramdb")) {
actprogramdb <<- rbind(actprogramdb, data)
} else {
actprogramdb <<- data
}
saveData_actprogram(actprogramdb)
}
#Read
ReadData_actprogram <- function() {
if (exists("actprogramdb")) {
actprogramdb
}
}
ReadData_actprogram_filter <- function(filter_prog){
if (exists("actprogramdb")) {
actprogramdb
filtered <- filter(actprogramdb, activity_client_date == filter_prog)
}
}
#Update
UpdateData_actprogram <- function(data) {
data <- CastData_actprogram(data)
actprogramdb[row.names(actprogramdb) == row.names(data), ] <<- data
shinyjs::disable('updateactprogram')
shinyjs::enable('submitactprogram')
saveData_actprogram(actprogramdb)
}
CastData_actprogram <- function(data) {
start_date <- as.Date("1970-01-01") + as.double(data['actual_start_date'])
end_date <- as.Date("1970-01-01") + as.double(data['actual_end_date'])
datar <- data.frame(
activity_client_date = data["activity_client_date"],
actual_id = data["actual_id"],
actual_start_date = as.character(start_date),
actual_start_time = data["actual_start_time"],
actual_end_date = as.character(end_date),
actual_end_time = data["actual_end_time"],
actual_activity_location = data["actual_activity_location"],
stringsAsFactors = FALSE)
rownames(datar) <- data["aid"]
return (datar)
}
CreateDefaultRecord_actprogram <- function(d) {
mydefault <- CastData_actprogram_default(list(aid = "0", activity_client_date = d['activity_client_date'],
actual_id = "", actual_start_date="", actual_start_time="",
actual_end_date= "", actual_end_time ="", actual_activity_location=""))
print(mydefault)
return (mydefault)
}
UpdateInputs_actprogram <- function(data, session) {
updateDateInput(session, "actual_start_date", value=NA)
updateDateInput(session, "actual_end_date", value=NA)
updateTextInput(session, "actual_activity_location", value="")
updateTextInput(session, "actual_start_time", value="")
updateTextInput(session, "actual_end_time", value="")
}
View(actprogramdb)
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
GetPrep <- function(){
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered <- filter(listed, month(as.Date(listed$activity_date)) == this_month)
dashboard_filtered <- filter(dashboard_filtered, year(as.Date(dashboard_filtered$activity_date)) == this_year)
return(dashboard_filtered)
}
GetActual <- function(){
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered_act <- filter(act, month(as.Date(act$actual_start_date)) == this_month)
dashboard_filtered_act <- filter(dashboard_filtered_act, year(as.Date(dashboard_filtered_act$actual_start_date)) == this_year)
return(dashboard_filtered_act)
}
GetPrep()
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered <- filter(listed, month(as.Date(listed$activity_date)) == this_month)
dashboard_filtered <- filter(dashboard_filtered, year(as.Date(dashboard_filtered$activity_date)) == this_year)
return(dashboard_filtered)
View(listed)
View(listed)
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered <- filter(listed, month(as.Date(listed$activity_date)) == this_month)
View(listed)
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
combined <- paste("A", "(", "B", ")")
cobined
combined <- paste("A", "(", "B", ")")
runApp('crudtest.R')
runApp('crudtest.R')
runApp('crudtest.R')
##############FREQUENCY#############
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
View(listed)
runApp('crudtest.R')
runApp('crudtest.R')
##############FREQUENCY#############
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
write.csv(listed, "merged.csv")
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[1],  all.x = TRUE)
write.csv(act, "merged.csv")
runApp('crudtest.R')
#First, merge datasets to get the mapping
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
View(listed)
#First, merge datasets to get the mapping
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[2],  all.x = TRUE)
View(listed)
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[2],  all.x = TRUE)
View(act)
runApp('crudtest.R')
#First, merge datasets to get the mapping
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[2],  all.x = TRUE)
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[2],  all.x = TRUE)
View(act)
runApp('crudtest.R')
unique(act$actual_id)
frequency(listed$prep_id)
table(listed$prep_id)
freqtable <- table(listed$prep_id)
freqtable <- as.data.frame(table(listed$prep_id))
runApp('crudtest.R')
hrs <- function(u) {
x <- u * 3600
return(x)
}
mns <- function(m) {
x <- m * 60
return(x)
}
GetPrep <- function(){
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered <- filter(listed, month(as.Date(listed$activity_date)) == this_month)
dashboard_filtered <- filter(dashboard_filtered, year(as.Date(dashboard_filtered$activity_date)) == this_year)
return(dashboard_filtered)
}
GetActual <- function(){
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[1],  all.x = TRUE)
this_month <- month(Sys.Date())
this_year <- year(Sys.Date())
# Filter only this month and this year to take out relevant data to display on dashboard
# Can modify this part to determine what to show on dashboard
dashboard_filtered_act <- filter(act, month(as.Date(act$actual_start_date)) == this_month)
dashboard_filtered_act <- filter(dashboard_filtered_act, year(as.Date(dashboard_filtered_act$actual_start_date)) == this_year)
return(dashboard_filtered_act)
}
GetDashboardCalendar <- function(){
content = character()
start = character()
end = character()
type = character()
style = character()
title = character()
dashboard_filtered <- GetPrep()
if (nrow(dashboard_filtered) != 0){
# Loop through all prep activities to pick out and append to content, start and end
for(i in 1:nrow(dashboard_filtered)) {
id <- dashboard_filtered[i,]$prep_id
client <- unlist(strsplit(dashboard_filtered[i,]$activity_client_date, " "))[1]
startdate <- dashboard_filtered[i,]$activity_date
starttime <- format(strptime(dashboard_filtered[i,]$activity_start_time, format="%H%M"), format = "%H:%M")
startdatetime <- paste(startdate, starttime)
startdatetime <- strptime(startdatetime, "%Y-%m-%d %H:%M")
enddatetime <- startdatetime + hrs(as.numeric(dashboard_filtered[i,]$activity_duration))
temptitle <- paste(id, client, startdatetime, enddatetime)
#Client in brackets
client_naming <- paste("(", client, ")", sep="")
combined <- paste(id, client_naming)
content <- append(content, combined)
start <- append(start, as.character(startdatetime))
end <- append(end, as.character(enddatetime))
type <- append(type, "box")
style <- append(style, "background-color: #ff9749; color: #38160a; border-color: black")
title <- append(title, temptitle)
}
}
dashboard_filtered_act <- GetActual()
#Loop through all prep activities to pick out and append to content, start and end
if (nrow(dashboard_filtered_act) != 0){
for(i in 1:nrow(dashboard_filtered_act)) {
id <- dashboard_filtered_act[i,]$actual_id
client <- unlist(strsplit(dashboard_filtered_act[i,]$activity_client_date, " "))[1]
startdate <- dashboard_filtered_act[i,]$actual_start_date
starttime <- format(strptime(dashboard_filtered_act[i,]$actual_start_time, format="%H%M"), format = "%H:%M")
startdatetime <- paste(startdate, starttime)
startdatetime <- strptime(startdatetime, "%Y-%m-%d %H:%M")
enddate <- dashboard_filtered_act[i,]$actual_end_date
endtime <- format(strptime(dashboard_filtered_act[i,]$actual_end_time, format="%H%M"), format = "%H:%M")
enddatetime <- paste(enddate, endtime)
enddatetime <- strptime(enddatetime, "%Y-%m-%d %H:%M")
duration <- difftime(enddatetime, startdatetime, units="hours")
enddatetime <- startdatetime + hrs(as.numeric(duration))
type <- append(type, "box")
temptitle <- paste(id, client, startdatetime, enddatetime)
#Brackets for client
client_naming <- paste("(", client, ")", sep="")
combined <- paste(id, client_naming)
content <- append(content, combined)
start <- append(start, as.character(startdatetime))
end <- append(end, as.character(enddatetime))
style <- append(style, "background-color: #660066; color: #ff9900; border-color: black")
title <- append(title, temptitle)
}
}
if (length(content) != 0){
datax <- data.frame(
id      = 1:length(content),
content = content,
start   = start,
end     = end,
type    = type,
style   = style,
title   = title
)
return(datax)
}else{
return(df <- data.frame())
}
}
datax <- GetDashboardCalendar()
################################################FREQUENCY PLOT###########################################
#First, merge datasets to get the mapping
listed <- merge(x=prepprogramdb, y=prepdb, by.x=colnames(prepprogramdb)[2], by.y=colnames(prepdb)[2],  all.x = TRUE)
act <- merge(x=actprogramdb, y=actldb, by.x=colnames(actprogramdb)[2], by.y=colnames(actldb)[2],  all.x = TRUE)
#Set data for prep
prepfreqtable <- as.data.frame(table(listed$prep_id))
prepx <- prepfreqtable$Var1
prepy <- prepfreqtable$Freq
prepfreq <- data.frame(prepx, prepy)
#Set data for actual
actfreqtable <- as.data.frame(table(act$actual_id))
actx <- actfreqtable$Var1
acty <- actfreqtable$Freq
actfreq <- data.frame(actx, acty)
